/*
 * Declarations 
 */

var settings_file = require('./nexo_cred.json').nexo; // This has to go out out of the moduke

var net = require('net'),
    util = require('util');

// Defaults
var settings = {
    host:     'localhost',
    port:     1024,
    pass_md5: '',
    card_addr:'00000000'
}


/*
 * Exported methods
 */

function nexo() {

    // Call constructor of parrent object
    nexo.super_.call(this);

    // Some properties if needed will go here

    // Set config from json object skipping null values
    this.setConfig = function (config) {
        console.log(util.inspect(settings) + ' \n Set to \n ' + util.inspect(config));
        settings.host = settings.host || config.host;
        settings.port = settings.port || config.port;
        settings.pass_md5 = settings.pass_md5 || config.pass_md5 || require('crypto').createHash('md5').update(config.password).digest('hex');
        settings.card_addr = settings.card_addr || config.card_addr;
    }

    this.getConfig = function() {
        return settings;
    }

}

// Set inheretence
util.inherits(nexo, net.Socket);

/*
 * Utility functions
 */

// Convert hex to ASCII
function hex2a(hexx) {
    var hex = hexx.toString();//force conversion
    var out = new Buffer(hex.length/2);
    for (var i = 0; i < hex.length; i += 2) {
        out.writeUInt8(parseInt(hex.substr(i, 2), 16),i/2);
    }
    return out;
}

// Sleep
function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}


/*
 * Implementation of socket handling
 */

var nexo_client = new nexo(); //to be replaced by new nexo.Socket above thsis module 
var nexo_read = false; // When true, we need to read from Nexo after CMD OK

nexo_client.setConfig(settings_file);
nexo_client.connect(settings.port, settings.host);

nexo_client.connect(settings.port, settings.host, function() {

    console.log('CONNECTED TO: ' + settings.host + ':' + settings.port);
    // Write a message to the socket as soon as the nexo_client is connected, the server will receive it as message from the nexo_client 

});

// Add a 'close' event handler for the nexo_client socket
nexo_client.on('connect', function() {

    console.log('Connection opened');

});

// Add a 'data' event handler for the nexo_client socket
// data is what the server sent to this socket
nexo_client.on('data', function(data) {
    
    console.log('DATA: ' + data);
    
    if (data=='Welcome to AISIS server.') {
        nexo_client.write('plain\n\0');
    } else if (data == 'NO uSSL') {
        nexo_client.write(new Buffer(hex2a(settings.pass_md5 || require('crypto').createHash('md5').update(settings.password).digest('hex'))));
    } else if (data == 'LOGIN FAILED') {
        nexo_client.destroy();
    } else if (data == 'LOGIN OK') {
        nexo_client.write('!\0');
        nexo_client.write('@' + settings.card_addr + ':system info nexo_mqtt connected!\0');
    } else if (data == 'CMD OK') {
        if (nexo_read) {
            nexo_read = false;
            nexo_client.write('@' + settings.card_addr + ':get\0');
        }
    } else if (data.toString().substr(0,9)=='~' + settings.card_addr) {
        console.log(data.toString().substr(9, data.length - 9));
        mqtt_client.publish(settings.mqtt.root + '/' + settings.card_addr + '/' + data.toString().substr(10,data.length - 10))
    } else {
        console.log('?' + data[0]);
        //nexo_client.destroy();
    }

});

// Add a 'close' event handler for the nexo_client socket
nexo_client.on('close', function() {

    console.log('Connection closed');

});

// Add a 'end' event handler for the nexo_client socket
nexo_client.on('end', function() {

    console.log('Connection ended');

});

// Add a 'timeout' event handler for the nexo_client socket
nexo_client.on('timeout', function() {

    console.log('Connection timed out');

});

// Add a 'drain' event handler for the nexo_client socket
nexo_client.on('drain', function() {

    console.log('Connection drained');

});

// Add a 'error' event handler for the nexo_client socket
nexo_client.on('error', function() {

    console.log('Connection error');

});

