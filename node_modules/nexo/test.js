/*
 * Test
 */
var settings_file = require('./nexo_cred.json').nexo; // This has to go out out of the moduke

var Nexo = require('./nexo'),
    Topology = require('./topology'),
    util = require('util');

var nexo = new Nexo(settings_file), //to be replaced by new nexo.Socket above thsis module 
    topology = new Topology(nexo, settings_file.topology);

var counter = 0,
    old_topology = null;

//nexo.setConfig(settings_file);
//topology.setConfig(settings_file.topology);

nexo.on('nexo_disconnected',nexoDisconnectedCallback);
nexo.on('nexo_connecting',nexoConnectingCallback);
nexo.on('nexo_connected',nexoConnectedCallback);
nexo.on('nexo_heartbeat',nexoHeartBeatCallback);

//topology.on('topo_scanned',topoScannedCallback);

/*nexo_client.on('nexo_written',nexoWriteCallback);
nexo_client.on('nexo_read',nexoReadCallback);
nexo_client.on('nexo_pong',nexoPongCallback);
nexo_client.on('nexo_error',nexoErrorCallback);
*/
nexo.connectTo();

function nexoDisconnectedCallback(data) {

    console.log('Disconnected due to %s', data);
    
    switch (data) {

        case 'login_failed':
        break;

        default:

    }
}

function nexoConnectingCallback() {

}

function nexoConnectedCallback() {
    console.log('Connected to: ' + nexo.host + ':' + nexo.port);
    topology.scan();

    //nexo_client.ping();
    //    nexo_client.writeTo("system command wylacz 'przek sypialnia'");
}

function nexoWriteCallback(data) {
    console.log('Written data: ' + counter + ' : ' + data);
}

function nexoReadCallback(data) {
    console.log('Received data: ' + counter + ' : ' + data);
}

function nexoHeartBeatCallback(data) {
    counter ++;
    switch (counter) {
        case 10: 
            nexo.switchOn("'przek salon'");
            break;
        case 20:
        case 40:
            nexo.checkState(" przek salon ");
            break;
        case 30:
            nexo.switchOff('przek salon');
            break;
        case 50:
            counter = 0;
        default: 
            // This is already called automatically nexo_client.poolFrom(readData);
    }
    var t = topology.getTopology();
    if (t && old_topology && (t != old_topology)) {
        console.log('Topology: %s', util.inspect(t));
        old_topology = t;
    }
}

function nexoPongCallback() {
    console.log('pong');

    //nexo_client.readFrom("system command stan 'przek salon'");

}

function nexoErrorCallback() {
    console.log('ERROR');
}

function topoScannedCallback(data) {
    topology.scan();
}


