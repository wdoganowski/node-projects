/*
 * Test
 */

var debug = require('debug')('test'),
    util = require('util');

var settings_file = require('./nexo_cred.json').nexo; // This has to go out out of the moduke
//debug('Settings ' + util.inspect(settings_file));

var Nexo = require('./nexo'),
    Topology = require('./topology'),
    util = require('util');

var nexo = new Nexo(settings_file), //to be replaced by new nexo.Socket above thsis module 
    topology = new Topology(nexo, settings_file.topology);

<<<<<<< HEAD
nexo_client.connectTo(readDataCallback);
=======
var counter = 0,
    old_topology = null;
>>>>>>> FETCH_HEAD

//nexo.setConfig(settings_file);
//topology.setConfig(settings_file.topology);

nexo.on('nexo_disconnected',nexoDisconnectedCallback);
nexo.on('nexo_connecting',nexoConnectingCallback);
nexo.on('nexo_connected',nexoConnectedCallback);
nexo.on('nexo_heartbeat',nexoHeartBeatCallback);

<<<<<<< HEAD
function pong() {
    debug('pong');

    //nexo_client.readFrom("system command stan 'przek sypialnia'");

}

function readDataCallback(state, data) {
    debug("ReadDataCallback state: " + nexo_client.state + " data: " + data)
    switch (nexo_client.state) {
        case 'disconnected': {
            break;
        }
=======
//topology.on('topo_scanned',topoScannedCallback);

/*nexo_client.on('nexo_written',nexoWriteCallback);
nexo_client.on('nexo_read',nexoReadCallback);
nexo_client.on('nexo_pong',nexoPongCallback);
nexo_client.on('nexo_error',nexoErrorCallback);
*/
nexo.connectTo();

function nexoDisconnectedCallback(data) {

    console.log('Disconnected due to %s', data);
    
    switch (data) {

        case 'login_failed':
        break;

        default:

    }
}

function nexoConnectingCallback() {

}

function nexoConnectedCallback() {
    console.log('Connected to: ' + nexo.host + ':' + nexo.port);
    //topology.scan();
>>>>>>> FETCH_HEAD

    //nexo_client.ping();
    //    nexo_client.writeTo("system command wylacz 'przek sypialnia'");
}

<<<<<<< HEAD
        case 'connected': {
            debug('CONNECTED TO: ' + nexo_client.host + ':' + nexo_client.port);

            //nexo_client.registerReadCallback(readDataCallback);
            //nexo_client.registerErrorCallback(errorCallback);
            //nexo_client.ping(pong);
            //    nexo_client.writeTo("system command wylacz 'przek sypialnia'");
=======
function nexoWriteCallback(data) {
    console.log('Written data: ' + counter + ' : ' + data);
}

function nexoReadCallback(data) {
    console.log('Received data: ' + counter + ' : ' + data);
}
>>>>>>> FETCH_HEAD

function nexoHeartBeatCallback(data) {
    counter ++;
    switch (counter) {
        case 100: 
            nexo.switchOn("'przek salon'");
            break;
        case 200:
        case 404:
            nexo.checkState(" przek salon ");
            break;
<<<<<<< HEAD
        }

        case '': {
            /*counter ++;
            switch (counter) {
                case 10: 
                    nexo_client.switchOn("'przek sypialnia'");
                    break;
                case 20:
                case 40:
                    nexo_client.checkState(" przek sypialnia ");
                    break;
                case 30:
                    nexo_client.switchOff('przek sypialnia');
                    break;
                case 50:
                    counter = 0;
                default: 
                    // This is already called automatically nexo_client.poolFrom(readData);
            }*/
            if (nexo_client.buffer && nexo_client.buffer.length) debug('RECEIVED DATA ' + counter + ' : ' + nexo_client.buffer);
        }

        default: {
            debug('Unknown state');
        }
=======
        case 300:
            nexo.switchOff('przek salon');
            break;
        case 500:
            counter = 0;
        default: 
            // This is already called automatically nexo_client.poolFrom(readData);
    }
    var t = topology.getTopology();
    if (t && old_topology && (t != old_topology)) {
        console.log('Topology: %s', util.inspect(t));
        old_topology = t;
>>>>>>> FETCH_HEAD
    }
}

function nexoPongCallback() {
    console.log('pong');

    //nexo_client.readFrom("system command stan 'przek salon'");

}

function nexoErrorCallback() {
    console.log('ERROR');
}

function topoScannedCallback(data) {
    topology.scan();
}


