/*
 * Declarations 
 */
var events = require('events'),
    util = require('util'),
    debug = require('debug')('topo')

/*
 * Exported object
 */
function Topology(nexo, topology, options) {
    if (!(this instanceof Topology)) return new Topology(nexo, topology, options);

    // Call constructor of parrent object
    events.EventEmitter.call(this, options);

    this._nexo = nexo;
    this._topology = topology;
}
// Set inheretence
util.inherits(Topology, events.EventEmitter);

// Exported methods
Topology.prototype.setConfig = function (nexo, topology) {
    this._nexo = this._nexo || nexo;
    this._topology = this._topology || topology;
}

Topology.prototype.getNexo = function () {
    return this._nexo;
}

Topology.prototype.getTopology = function () {
    return this._topology;
}

Topology.prototype.scan = function () {

    debug('Scanning...');
    
    for (index in this._topology) {

        switch (this._topology[index].type) {

            case 'relay':

                this._nexo.once('nexo_read', function setStateOfRelay (data) {
                    debug('Relay %s', data);
                    var decoded = this.nexo.decodeState(data);
                    if (decoded.name == this.relay.name) this.relay.state = decoded.state;
                    else debug('Wrong relay %s', decoded.name);
                }.bind({nexo: this._nexo, topology: this._topology, relay: this._topology[index]}));
                this._nexo.checkState(this._topology[index].name)
                break;

            default:

        }
    }
}

module.exports = Topology;

/*
 * Implementation of socket handling
 */

